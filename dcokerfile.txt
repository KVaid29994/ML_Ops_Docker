A Dockerfile is a text file that contains instructions to build a Docker image â€” essentially a blueprint for 
creating a containerized environment. 

It defines things like:
--> The base image (e.g., Python, Ubuntu)
--> Dependencies (libraries, tools)
--> Commands to run (e.g., installing packages, running scripts)
--> Working directories and exposed ports

ðŸ”¹ How to Create a Dockerfile (Step-by-Step)
1. Create a new file named Dockerfile (no extension) in your project root
2. Add basic Dockerfile instructions. Example for a Python project:
        -- # Use a base Python image
             FROM python:3.10-slim
        -- # Set the working directory
             WORKDIR /app
        -- # Copy local code to the container
             COPY . .
        -- # Install dependencies
             RUN pip install --no-cache-dir -r requirements.txt
        -- # Set the default command
             CMD ["python", "main.py"]

3. Build the Docker image: 
        # docker build -t my-python-app .

4. Run the Docker container:
        - docker run -it my-python-app

5. Common docker Commands
| Command   | Description                                     |
| --------- | ----------------------------------------------- |
| `FROM`    | Base image to use                               |
| `WORKDIR` | Sets the working directory inside the container |
| `COPY`    | Copies files from host to container             |
| `RUN`     | Runs shell commands during build                |
| `CMD`     | Default command to run when container starts    |
| `EXPOSE`  | Documents the port the container listens on     |



ðŸ”¹ Image
A Docker image is a read-only template used to create containers.
It includes the app code, runtime, libraries, dependencies, and configuration.
Think of it like a snapshot or a blueprint.
ðŸ§  Analogy: Like a software installer (.exe or .apk), but for containers.


ðŸ”¹ Container
A container is a running instance of an image.
It's isolated from the host system and other containers.
You can have multiple containers from the same image.
ðŸ§  Analogy: If an image is a blueprint, a container is the building made from it.


ðŸ”¹ Dockerfile
A Dockerfile is a script with instructions to build an image.
It defines base image, install steps, copy files, etc.
ðŸ§  Analogy: Like a recipe for baking a cake.

ðŸ”¹ Build
The build process reads the Dockerfile and creates an image.
Command: docker build -t image-name .

ðŸ”¹ Volume
A volume is used for persistent data storage in Docker.
Data inside containers is lost when they stop unless stored in a volume.
ðŸ§  Analogy: Like an external hard drive for your container.

ðŸ”¹ Network
Docker creates virtual networks to allow communication between containers or with the outside world.
ðŸ§  Analogy: Like a private LAN for your containers.

ðŸ”¹ Registry
A registry is where Docker images are stored and shared.
Public: Docker Hub; Private: Self-hosted registries.

ðŸ”¹ Docker Compose
A tool to define and run multi-container applications using a docker-compose.yml file.
ðŸ§  Analogy: Like an orchestra conductor managing multiple instruments (containers).


Even though your Dockerfile has EXPOSE 5000, that's just documentation.

You must explicitly publish the port when running the container:
docker run -p 5000:5000 your-image-name
This maps port 5000 on the host to port 5000 inside the container.


docker run -p 5000:5000 mlops-docker-demo


11. Docker tags

In Docker, tags are labels used to identify different versions of a Docker image. 
They let you specify which version of an image you want to use or pull from a registry like Docker Hub.

docker tag mlops-docker-demo kvaid29994/mlops-docker-demo:latest
### no space between : and name


***** docker push kvaid29994/mlpops-dockermlops-docker-demo:latest**